L_plantarum <- seqinr::read.fasta("L_plantarum.fasta")[[1]]
forward <- findORF(L_plantarum, 300)
reverse <- findORF(compStrand(L_plantarum), 300)
nrow(forward) + nrow(reverse)
#1213 ORFS
s.aureus <- read.csv("Staphylococcus_sequence.txt")[[1]]
knitr::opts_chunk$set(comment = "")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
suppressMessages(library(Biostrings)) #silently loads Biostrings functions
source("pairAlign_cpp.R")
# predefined constant
GAP_SCORE <- -2
alignmentMatrix<-function(seq1,seq2, scoreMat){
#convert seq1 and seq2 strings to vector
seq1 <- strsplit(seq1, "")[[1]]
seq2 <- strsplit(seq2, "")[[1]]
amatrix <- matrix(0, ncol=length(seq1)+1, nrow=length(seq2)+1) #initialize alignment matrix
rownames(amatrix) <-c("", seq2) #set row names
colnames(amatrix) <-c("", seq1) #set column names
#set the values of the 1st row and column
amatrix[1,] <- seq(0, -2*(ncol(amatrix)-1), by=-2)
amatrix[,1] <- seq(0, -2*(nrow(amatrix)-1), by=-2)
#then loop through the rest of the matrix compare possible values (look at the formula in blue above)
for (i in 2:nrow(amatrix)){
for (j in 2:ncol(amatrix)){
amatrix[i,j] <- max(amatrix[i-1,j-1]+scoreMat[i-1, j-1], amatrix[i-1,j]+GAP_SCORE, amatrix[i,j-1]+GAP_SCORE)
}
}
return(amatrix)
}
# create the score matrix mapping
lut <- matrix(1, 4, 4)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
# create the score matrix
x <- "CGTGAATTCAT"
y <- "GACTTAC"
scoreMat <- lut[strsplit(y,"")[[1]], strsplit(x,"")[[1]]]
# create the alignment matrix
alignmentMat <- alignmentMatrix(x, y, scoreMat)
alignmentMat
knitr::opts_chunk$set(comment = "")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
suppressMessages(library(Biostrings)) #silently loads Biostrings functions
source("pairAlign_cpp.R")
#Example use for protein sequence
pairAlign("LEVTKGGQRKDRR", "LEVGMTKGGQRKERR", substitutionMatrix="BLOSUM62", gapExtension = -2, type = "global")
#Example use for nucleotide sequence; note that a new substitution matrix has to be built for our nucleotide sequences
sub <- nucleotideSubstitutionMatrix(match = 3, mismatch = 1, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("ATTACCAGA", "ATTCCTGA", substitutionMatrix = sub, gapExtension = -2, type = "global")
#Example use for protein sequence
pairAlign("LEVTKGGQRKDRR", "LEVGMTKGGQRKERR", substitutionMatrix="BLOSUM62", gapExtension = -2, type = "global")
#Example use for nucleotide sequence; note that a new substitution matrix has to be built for our nucleotide sequences
sub <- nucleotideSubstitutionMatrix(match = 3, mismatch = 1, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("ATTACCAGA", "ATTCCTGA", substitutionMatrix = sub, gapExtension = -2, type = "global")
#Your code here
sub <- nucleotideSubstitutionMatrix(match = 3, mismatch = 1, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("ATTACCAGA", "ATTCCTGA", substitutionMatrix = sub, gapExtension = -2, type = "global")
#Your code here
sub <- nucleotideSubstitutionMatrix(match = 3, mismatch = 1, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = -2, type = "global")
#Your code here
sub <- nucleotideSubstitutionMatrix(match = 3, mismatch = -1, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = -2, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 5
MISMATCH_SCORE <- -2
GAP_SCORE <- -3
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# gapOpening and gapExtension are respectively set to: -1 and -1
pairAlign("MVWHVWHLAGNPI", "HDVGVWGVWHGVAK", substitutionMatrix="BLOSUM62", gapOpening = -1, gapExtension = -1, type = "global")
# gapOpening and gapExtension are respectively set to: -1 and -4
pairAlign("MVWHVWHLAGNPI", "HDVGVWGVWHGVAK", substitutionMatrix="BLOSUM62", gapOpening = -1, gapExtension = -4, type = "global")
# gapOpening and gapExtension are respectively set to: -10 and -2
pairAlign("MVWHVWHLAGNPI", "HDVGVWGVWHGVAK", substitutionMatrix="BLOSUM62", gapOpening = -10, gapExtension = -2, type = "global")
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 100)
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 400)
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 100)
findORF(ecoli, 100)
E-coli-ORF <- findORF(ecoli, 100)
Ecoli_ORF <- findORF(ecoli, 100)
Ecoli_ORF_sorted <- Ecoli_ORF[order(Ecoli_ORF$Length, decreasing = T),]
# Use the head() function on your sorted data frame to output the first few longest ORFs in the forward strand of the E coli genome
Ecoli_ORF_sorted.head()
# Use the head() function on your sorted data frame to output the first few longest ORFs in the forward strand of the E coli genome
head(Ecoli_ORF_sorted)
staph <- seqinr::read.fasta("Staphylococcus-sequence.fasta")[[1]]
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 100)
staph <- seqinr::read.fasta("Staphylococcus-sequence.fasta")[[1]]
staph <- seqinr::read.fasta("Staphylococcus_sequence.fasta")[[1]]
staph <- seqinr::read.fasta("Staphylococcus_sequence.fasta")[[1]]
staph <- seqinr::read.fasta("Staphylococcus_sequence.fasta")[[1]]
staph <- read.fasta("Staphylococcus_sequence.fasta")[[1]]
staph <- seqinr::read.fasta("Staphylococcus_sequence.fasta")[[1]]
library(seqinr)
staph <- read.fasta("Staphylococcus_sequence.fasta")[[1]]
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 100)
staph <- seqinr::read.fasta("Staphylococcus_sequence.fasta")[[1]]
findORF(staph, 200)
findORF(compStrand(staph), 200)
x <- matrix(data = 1:25, nrow = 5, ncol = 5)
mean(x)
sd(x)
sum(x)
testMatrix %*% testMatrix
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
sub
#pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class(sub)
#pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class(sub)
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class(class(sub))
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class(sub)
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
length(class(sub))
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class("sub")
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class(class("sub"))
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
length(class("sub"))
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class("sub")[1]
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
class("sub")[2]
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
suppressMessages(library(Biostrings)) #silently loads Biostrings functions
source("pairAlign_cpp.R")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
suppressMessages(library(Biostrings)) #silently loads Biostrings functions
source("pairAlign_cpp.R")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 5
MISMATCH_SCORE <- -2
GAP_SCORE <- -3
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
#Example use for protein sequence
pairAlign("LEVTKGGQRKDRR", "LEVGMTKGGQRKERR", substitutionMatrix="BLOSUM62", gapExtension = -2, type = "global")
#Example use for nucleotide sequence; note that a new substitution matrix has to be built for our nucleotide sequences
sub <- nucleotideSubstitutionMatrix(match = 3, mismatch = 1, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("ATTACCAGA", "ATTCCTGA", substitutionMatrix = sub, gapExtension = -2, type = "global")
knitr::opts_chunk$set(comment = "")
matrix(data = 1:4, nrow = 2, ncol = 2)
matrix(data = 1:4, nrow = 2, ncol = 2, byrow =TRUE)
x <- matrix(data = 1:25, nrow = 5, ncol = 5)
x
rowMeans(x)
colMeans(x)
ncol(x)
nrow(x)
dim(x)
testMatrix <- matrix(nrow = 3, ncol = 3, data = 1:9)
testMatrix
testMatrix[3, 2]
testMatrix[2, 3]
testMatrix[2,]
testMatrix[, 2]
testMatrix + testMatrix
testMatrix * testMatrix
library(seqinr)
x <- strsplit("GATCCA", "")[[1]]
y <- strsplit("GATTACA", "")[[1]]
x
y
scoreMatrix <- function(s1, s2){ #function of two sequences
size1 <- length(s1)
size2 <- length(s2)
scoreMat <- matrix(0, size1, size2)
for(i in 1:size1){
for(j in 1:size2){
if(s1[i] == s2[j]){
scoreMat[i,j] <- 4
} else {
scoreMat[i,j] <- 1
}
}
}
dimnames(scoreMat) <- list(s1, s2)
return(scoreMat)
}
scoreMat <- scoreMatrix(x, y)
scoreMat
lut <- matrix(1, 4, 4)
diag(lut) <- 4
dimnames(lut) <- list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
lut
lut["G", "A"] #finds the score for matching a guanine with an adenine
scoreMat <- lut[x, y]
scoreMat
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
suppressMessages(library(Biostrings)) #silently loads Biostrings functions
source("pairAlign_cpp.R")
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 100)
#Generate test object; don't need to fully understand
cats <- data.frame(Name = c("Fluffy", "Tabby", "Enrique", "Madam Winthrop", "Steve"), Cuteness = 1:5, Weight = ceiling(runif(5, 0, 30)))
cats
#Order by values in "Weight" column
catsByWeight <- cats[order(cats$Weight, decreasing = T),]
catsByWeight
# supplying the data argument with MORE elements than the matrix
matrix(data = 1:25, nrow = 3, ncol = 3)
# supplying the data argument with LESS elements than the matrix
matrix(data = 1:4, nrow = 3, ncol = 3)
x <- matrix(data = 1:25, nrow = 5, ncol = 5)
mean(x)
sd(x)
sum(x)
testMatrix <- matrix(nrow = 2, ncol = 4, data = 1:8)
dim(testMatrix)
# initialize test matrix
x <- matrix(nrow = 4, ncol = 4, data = 1:16)
# replace each element with new value
NEW_VALUE <- 3
for (i in 1:nrow(x)){
for (j in 1:ncol(x)){
x[i,j] <- NEW_VALUE
}
}
x
x <- matrix(nrow = 3, ncol = 3, data = 1:9)
x
for(i in 1:ncol(x)) {
for(j in 1:nrow(x)) {
print(x[i,j])
}
}
# function that calculates the standard deciation for each of the rows and returns the result as a vector
rowSD <- function(matrix){
c <- numeric(length = nrow(matrix))
for (i in 1:nrow(matrix)){
c[i] <- sd(matrix[i,])
}
return(c)
}
testMatrix <- matrix(nrow = 3, ncol = 3, data = 1:9)
rowSD(testMatrix)
testMatrix %*% testMatrix
# predefined constant
GAP_SCORE <- -2
alignmentMatrix<-function(seq1,seq2, scoreMat){
#convert seq1 and seq2 strings to vector
seq1 <- strsplit(seq1, "")[[1]]
seq2 <- strsplit(seq2, "")[[1]]
amatrix <- matrix(0, ncol=length(seq1)+1, nrow=length(seq2)+1) #initialize alignment matrix
rownames(amatrix) <-c("", seq2) #set row names
colnames(amatrix) <-c("", seq1) #set column names
#set the values of the 1st row and column
amatrix[1,] <- seq(0, -2*(ncol(amatrix)-1), by=-2)
amatrix[,1] <- seq(0, -2*(nrow(amatrix)-1), by=-2)
#then loop through the rest of the matrix compare possible values (look at the formula in blue above)
for (i in 2:nrow(amatrix)){
for (j in 2:ncol(amatrix)){
amatrix[i,j] <- max(amatrix[i-1,j-1]+scoreMat[i-1, j-1], amatrix[i-1,j]+GAP_SCORE, amatrix[i,j-1]+GAP_SCORE)
}
}
return(amatrix)
}
# create the score matrix mapping
lut <- matrix(1, 4, 4)
diag(lut) <- 3
dimnames(lut) <- list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
# create the score matrix
x <- "CGTGAATTCAT"
y <- "GACTTAC"
scoreMat <- lut[strsplit(y,"")[[1]], strsplit(x,"")[[1]]]
# create the alignment matrix
alignmentMat <- alignmentMatrix(x, y, scoreMat)
alignmentMat
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 5
MISMATCH_SCORE <- -2
GAP_SCORE <- -3
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# gapOpening and gapExtension are respectively set to: -1 and -1
pairAlign("MVWHVWHLAGNPI", "HDVGVWGVWHGVAK", substitutionMatrix="BLOSUM62", gapOpening = -1, gapExtension = -1, type = "global")
# gapOpening and gapExtension are respectively set to: -1 and -4
pairAlign("MVWHVWHLAGNPI", "HDVGVWGVWHGVAK", substitutionMatrix="BLOSUM62", gapOpening = -1, gapExtension = -4, type = "global")
# gapOpening and gapExtension are respectively set to: -10 and -2
pairAlign("MVWHVWHLAGNPI", "HDVGVWGVWHGVAK", substitutionMatrix="BLOSUM62", gapOpening = -10, gapExtension = -2, type = "global")
source("ORF.R")
ecoli <- seqinr::read.fasta("E_coli.fasta")[[1]]
findORF(ecoli[1:10000], 100)
# Use findORF() to find the ORFs that have a minimum length of 100 codons in the forward strand of the E. coli genome, and store it in a variable E-coli-ORF
Ecoli_ORF <- findORF(ecoli, 100)
# Sort the rows of ecoliORF by ORF length
Ecoli_ORF_sorted <- Ecoli_ORF[order(Ecoli_ORF$Length, decreasing = T),]
# Use the head() function on your sorted data frame to output the first few longest ORFs in the forward strand of the E coli genome
head(Ecoli_ORF_sorted)
# calculate the ORFs of length >= 200 nucleotide in the forward and reverse strand of the Staphylococcus aureus genome
staph <- seqinr::read.fasta("Staphylococcus_sequence.fasta")[[1]]
findORF(staph, 200)
findORF(compStrand(staph), 200)
# produce the alignment for the two nucleotide sequences “GATTACACCTAGGT” and “GATCCAACGTC”
# SCORE SYSTEM
MATCH_SCORE <- 3
MISMATCH_SCORE <- -1
GAP_SCORE <- -2
sub <- nucleotideSubstitutionMatrix(match = MATCH_SCORE, mismatch = MISMATCH_SCORE, baseOnly = TRUE) #creates DNA substitution matrix
pairAlign("GATTACACCTAGGT", "GATCCAACGTC", substitutionMatrix = sub, gapExtension = GAP_SCORE, type = "global")
# predefined constant
GAP_SCORE <- -2
alignmentMatrix<-function(seq1,seq2, scoreMat){
#convert seq1 and seq2 strings to vector
seq1 <- strsplit(seq1, "")[[1]]
seq2 <- strsplit(seq2, "")[[1]]
amatrix <- matrix(0, ncol=length(seq1)+1, nrow=length(seq2)+1) #initialize alignment matrix
rownames(amatrix) <-c("", seq2) #set row names
colnames(amatrix) <-c("", seq1) #set column names
#set the values of the 1st row and column
amatrix[1,] <- seq(0, -2*(ncol(amatrix)-1), by=-2)
amatrix[,1] <- seq(0, -2*(nrow(amatrix)-1), by=-2)
#then loop through the rest of the matrix compare possible values (look at the formula in blue above)
for (i in 2:nrow(amatrix)){
for (j in 2:ncol(amatrix)){
amatrix[i,j] <- max(amatrix[i-1,j-1]+scoreMat[i-1, j-1], amatrix[i-1,j]+GAP_SCORE, amatrix[i,j-1]+GAP_SCORE)
}
}
return(amatrix)
}
MATCH_SCORE <- 3
MISMATCH_SCORE <- 1
GAP_SCORE <- -3
# create the score matrix mapping
lut <- matrix(MISMATCH_SCORE, 4, 4)
diag(lut) <- MATCH_SCORE
dimnames(lut) <- list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
# create the score matrix
x <- "CGTGAATTCAT"
y <- "GACTTAC"
scoreMat <- lut[strsplit(y,"")[[1]], strsplit(x,"")[[1]]]
# create the alignment matrix
alignmentMat <- alignmentMatrix(x, y, scoreMat)
alignmentMat
# predefined constant
GAP_SCORE <- -2
alignmentMatrix<-function(seq1,seq2, scoreMat){
#convert seq1 and seq2 strings to vector
seq1 <- strsplit(seq1, "")[[1]]
seq2 <- strsplit(seq2, "")[[1]]
amatrix <- matrix(0, ncol=length(seq1)+1, nrow=length(seq2)+1) #initialize alignment matrix
rownames(amatrix) <-c("", seq2) #set row names
colnames(amatrix) <-c("", seq1) #set column names
#set the values of the 1st row and column
amatrix[1,] <- seq(0, -2*(ncol(amatrix)-1), by=-2)
amatrix[,1] <- seq(0, -2*(nrow(amatrix)-1), by=-2)
#then loop through the rest of the matrix compare possible values (look at the formula in blue above)
for (i in 2:nrow(amatrix)){
for (j in 2:ncol(amatrix)){
amatrix[i,j] <- max(amatrix[i-1,j-1]+scoreMat[i-1, j-1], amatrix[i-1,j]+GAP_SCORE, amatrix[i,j-1]+GAP_SCORE)
}
}
return(amatrix)
}
MATCH_SCORE <- 3
MISMATCH_SCORE <- 1
GAP_SCORE <- -3
# create the score matrix mapping
lut <- matrix(MISMATCH_SCORE, 4, 4)
diag(lut) <- MATCH_SCORE
dimnames(lut) <- list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
# create the score matrix
x <- "CGTGAATTCAT"
y <- "GACTTAC"
scoreMat <- lut[strsplit(y,"")[[1]], strsplit(x,"")[[1]]]
# create the alignment matrix
alignmentMat <- alignmentMatrix(x, y, scoreMat)
alignmentMat
MATCH_SCORE <- 3
MISMATCH_SCORE <- 1
GAP_SCORE <- -2
# create the score matrix mapping
lut <- matrix(MISMATCH_SCORE, 4, 4)
diag(lut) <- MATCH_SCORE
dimnames(lut) <- list(c("A", "C", "G", "T"), c("A", "C", "G", "T"))
# create the score matrix
x <- "CGTGAATTCAT"
y <- "GACTTAC"
scoreMat <- lut[strsplit(y,"")[[1]], strsplit(x,"")[[1]]]
# create the alignment matrix
alignmentMat <- alignmentMatrix(x, y, scoreMat)
alignmentMat
