install.packages('seqinr', repos='http://cran.us.r-project.org')
#use either "library("seqinr")" or "require("seqinr")" to load the newly installed package onto R.
require("seqinr") #load SeqinR library
choosebank()
choosebank("genbank")
closebank()
choosebank("refseqViruses")
rabies <- query("SP=Rabies Virus")
attributes(rabies)
rabies$nelem[[1]]
rabies$req[[1]]
rabies_seq <- getSequence(rabies$req[[1]])
closebank() #closes session
choosebank("Homo sapiens")
choosebank("genebank")
choosebank("genbank")
choosebank("genbank")
human <- query("SP=Homo sapiens")
choosebank("genbank")
human <- query("SP=Homo sapiens")
choosebank("refseq")
human <- query("SP=Homo sapiens")
human$nelem[[1]]
closebank()
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if seq[i:i+2] == "AUG"{
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(seq[i:i+2] == "AUG") {
seq[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStartCodons(seq)
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(all(seq[i:i+2] == c("a", "t", "g"))) {
seq[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStartCodons(seq)
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(seq[i] == "a" && seq[i+1] == "t" && seq[i+2] == "g") {
seq[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStartCodons(seq)
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(seq[i] == "a" && seq[i+1] == "t" && seq[i+2] == "g") {
seq[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
print(findStartCodons(seq))
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(seq[i] == "a" && seq[i+1] == "t" && seq[i+2] == "g") {
startcodons[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStartCodons(seq)
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(all(seq[i:i+2] == c("a", "t", "g"))) {
startcodons[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStartCodons(seq)
findStartCodons <- function(seq){
startcodons <- numeric(0) #This will initiate an empty vector. You can index into this vector at any location to store a new value. I.e. to store a value of 100 in the first position of this vector, you would index into the first location in `startcodons` and set it equal to 100.
k <- 1 #use k to index the 'startcodons' vector (startcodons[k]) as you store in it the index of each start codon you find in 'seq'. Remember to increase k each time (k<-k+1).
for(i in 1:(length(seq)-5)){
if(seq[i] == "a" && seq[i+1] == "t" && seq[i+2] == "g") {
startcodons[k] <- i
k <- k + 1
}
}
return(startcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStartCodons(seq)
# This function receives a DNA sequence as input and outputs a vector with the position of all stop codons.
findStopCodons <- function(seq){
stopcodons <-numeric(0)#This will initiate an empty vector. You can index into this vector at any location to store a new value. For example, to store a value of 100 in the first position of this vector, you would index into the first location in stopcodons and set it equal to 100.
k <- 1
for(i in 1:(length(seq)-2)){
# check for TAA
if(seq[i] == "t" && seq[i+1] == "a" && seq[i+2] == "a") {
stopcodons[k] <- i
k <- k + 1
}
# check for TAG
if(seq[i] == "t" && seq[i+1] == "a" && seq[i+2] == "g") {
stopcodons[k] <- i
k <- k + 1
}
# check for TGA
if(seq[i] == "t" && seq[i+1] == "g" && seq[i+2] == "a") {
stopcodons[k] <- i
k <- k + 1
}
}
return(stopcodons)
}
#Testing the function
seq<-c("g", "t", "a", "a", "t", "g", "t", "a", "g", "t", "g", "a", "t", "t", "g", "t", "a", "g")
findStopCodons(seq)
