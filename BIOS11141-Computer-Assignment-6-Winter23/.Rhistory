subject[i, j] <- alignment[[1]]
subject[j, i] <- alignment[[2]]
pattern[i, j] <- alignment[[2]]
}
}
distances <- sapply(mapply(`!=`, strsplit(pattern, ""), strsplit(subject, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
possibleCenters <- which(colSums(distanceMatrix) == min(colSums(distanceMatrix)))
center <- possibleCenters[which.max(nchar(sequences[possibleCenters]))]
patterns <- strsplit(pattern[,center][-center], "")
subjects <- strsplit(subject[,center][-center], "")
return(c(patterns, subjects, center))
}
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[1]
subjects <- tmp[2]
center <- tmp[3]
buildMSA(patterns, subjects, center)
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[1]
subjects <- tmp[2]
center <- tmp[3]
patterns
subjects
center
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
patterns
subjects
center
# CODE FROM LASt ASSIGNMENT THAT WE NEED
buildMSA <- function(patterns, subjects, center) {
MSA <- rbind(patterns[[1]], subjects[[1]])
for(i in 2:length(patterns)) {
j = 1 #index in new row
k = 1 #index in alignment of center sequence to sequence i
m = 1 #column index of MSA
maxLength = ncol(MSA) + length(patterns[[i]])
newRow = character(maxLength)
while(k <= length(patterns[[i]]) && m <= ncol(MSA)) {
if(patterns[[i]][k] == MSA[1, m]) {
newRow[j] <- subjects[[i]][k]
j <- j + 1
k <- k + 1
m <- m + 1
} else if(MSA[1, m] == "-") {
newRow[j] <- "-"
j <- j + 1
m <- m + 1
} else if(patterns[[i]][k] == "-") {
if(m == 1) {
MSA <- cbind(rep("-", nrow(MSA)), MSA)
} else {
MSA <- cbind(MSA[, 1:(m-1)], rep("-", nrow(MSA)), MSA[, m:ncol(MSA)])
}
newRow[j] <- subjects[[i]][k]
m <- m + 1
j <- j + 1
k <- k + 1
}
}
while(k <= length(patterns[[i]])) {
MSA <- cbind(MSA, rep("-", nrow(MSA)))
newRow[j] <- subjects[[i]][k]
k <- k + 1
j <- j + 1
}
while(m <= ncol(MSA)) {
newRow[j] <- "-"
m <- m + 1
j <- j + 1
}
newRow <- newRow[1:(m - 1)]
MSA <- rbind(MSA, newRow)
}
rownames(MSA) <- c("    Center:", paste0("Sequence ", 1:(nrow(MSA)), ":")[-center])
colnames(MSA) <- 1:ncol(MSA)
return(MSA)
}
patterns_subjects <- function(sequence){
n <- length(sequences)
pattern <- matrix("", n, n)
subject <- pattern
## Generate alignments
for(i in 1:(n-1)) {
for(j in (i+1):n) {
alignment <- pairAlign(sequences[i], sequences[j], "BLOSUM62", gapOpening=-6, gapExtension=-3)
pattern[j, i] <- alignment[[1]]
subject[i, j] <- alignment[[1]]
subject[j, i] <- alignment[[2]]
pattern[i, j] <- alignment[[2]]
}
}
distances <- sapply(mapply(`!=`, strsplit(pattern, ""), strsplit(subject, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
possibleCenters <- which(colSums(distanceMatrix) == min(colSums(distanceMatrix)))
center <- possibleCenters[which.max(nchar(sequences[possibleCenters]))]
patterns <- strsplit(pattern[,center][-center], "")
subjects <- strsplit(subject[,center][-center], "")
return(list(patterns, subjects, center))
}
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
patterns
subjects
center
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
buildMSA(patterns, subjects, center)
# CODE FROM LASt ASSIGNMENT THAT WE NEED
buildMSA <- function(patterns, subjects, center) {
MSA <- rbind(patterns[[1]], subjects[[1]])
for(i in 2:length(patterns)) {
j = 1 #index in new row
k = 1 #index in alignment of center sequence to sequence i
m = 1 #column index of MSA
maxLength = ncol(MSA) + length(patterns[[i]])
newRow = character(maxLength)
while(k <= length(patterns[[i]]) && m <= ncol(MSA)) {
if(patterns[[i]][k] == MSA[1, m]) {
newRow[j] <- subjects[[i]][k]
j <- j + 1
k <- k + 1
m <- m + 1
} else if(MSA[1, m] == "-") {
newRow[j] <- "-"
j <- j + 1
m <- m + 1
} else if(patterns[[i]][k] == "-") {
if(m == 1) {
MSA <- cbind(rep("-", nrow(MSA)), MSA)
} else {
MSA <- cbind(MSA[, 1:(m-1)], rep("-", nrow(MSA)), MSA[, m:ncol(MSA)])
}
newRow[j] <- subjects[[i]][k]
m <- m + 1
j <- j + 1
k <- k + 1
}
}
while(k <= length(patterns[[i]])) {
MSA <- cbind(MSA, rep("-", nrow(MSA)))
newRow[j] <- subjects[[i]][k]
k <- k + 1
j <- j + 1
}
while(m <= ncol(MSA)) {
newRow[j] <- "-"
m <- m + 1
j <- j + 1
}
newRow <- newRow[1:(m - 1)]
MSA <- rbind(MSA, newRow)
}
rownames(MSA) <- c("    Center:", paste0("Sequence ", 1:(nrow(MSA)), ":")[-center])
colnames(MSA) <- 1:ncol(MSA)
return(MSA)
}
patterns_subjects <- function(sequence, gapOpening=-6, gapExtension=-3, substitutionMatrix="BLOSUM62"){
n <- length(sequences)
pattern <- matrix("", n, n)
subject <- pattern
## Generate alignments
for(i in 1:(n-1)) {
for(j in (i+1):n) {
alignment <- pairAlign(sequences[i], sequences[j], substitutionMatrix=substitutionMatrix, gapOpening=gapOpening, gapExtension=gapExtension)
pattern[j, i] <- alignment[[1]]
subject[i, j] <- alignment[[1]]
subject[j, i] <- alignment[[2]]
pattern[i, j] <- alignment[[2]]
}
}
distances <- sapply(mapply(`!=`, strsplit(pattern, ""), strsplit(subject, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
possibleCenters <- which(colSums(distanceMatrix) == min(colSums(distanceMatrix)))
center <- possibleCenters[which.max(nchar(sequences[possibleCenters]))]
patterns <- strsplit(pattern[,center][-center], "")
subjects <- strsplit(subject[,center][-center], "")
return(list(patterns, subjects, center))
}
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
buildMSA(patterns, subjects, center)
centerStar <- function(sequences, substitutionMatrix, gapOpening, gapExtension) {
#Your code here
tmp <- patterns_subjects(sequences, gapOpening=gapOpening, gapExtension=gapExtension, substitutionMatrix=substitutionMatrix)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
return(buildMSA(patterns, subjects, center))
}
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
centerStar(globins, "BLOSUM62", gapOpening = -10, gapExtension = -3)
centerStar <- function(sequences, substitutionMatrix, gapOpening, gapExtension) {
#Your code here
tmp <- patterns_subjects(sequences, gapOpening=gapOpening, gapExtension=gapExtension, substitutionMatrix=substitutionMatrix)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
return(buildMSA(patterns, subjects, center))
}
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
centerStar(globins, "BLOSUM62", gapOpening = -10, gapExtension = -3)
# CODE FROM LASt ASSIGNMENT THAT WE NEED
buildMSA <- function(patterns, subjects, center) {
MSA <- rbind(patterns[[1]], subjects[[1]])
for(i in 2:length(patterns)) {
j = 1 #index in new row
k = 1 #index in alignment of center sequence to sequence i
m = 1 #column index of MSA
maxLength = ncol(MSA) + length(patterns[[i]])
newRow = character(maxLength)
while(k <= length(patterns[[i]]) && m <= ncol(MSA)) {
if(patterns[[i]][k] == MSA[1, m]) {
newRow[j] <- subjects[[i]][k]
j <- j + 1
k <- k + 1
m <- m + 1
} else if(MSA[1, m] == "-") {
newRow[j] <- "-"
j <- j + 1
m <- m + 1
} else if(patterns[[i]][k] == "-") {
if(m == 1) {
MSA <- cbind(rep("-", nrow(MSA)), MSA)
} else {
MSA <- cbind(MSA[, 1:(m-1)], rep("-", nrow(MSA)), MSA[, m:ncol(MSA)])
}
newRow[j] <- subjects[[i]][k]
m <- m + 1
j <- j + 1
k <- k + 1
}
}
while(k <= length(patterns[[i]])) {
MSA <- cbind(MSA, rep("-", nrow(MSA)))
newRow[j] <- subjects[[i]][k]
k <- k + 1
j <- j + 1
}
while(m <= ncol(MSA)) {
newRow[j] <- "-"
m <- m + 1
j <- j + 1
}
newRow <- newRow[1:(m - 1)]
MSA <- rbind(MSA, newRow)
}
rownames(MSA) <- c("    Center:", paste0("Sequence ", 1:(nrow(MSA)), ":")[-center])
colnames(MSA) <- 1:ncol(MSA)
return(MSA)
}
patterns_subjects <- function(sequences, gapOpening=-6, gapExtension=-3, substitutionMatrix="BLOSUM62"){
n <- length(sequences)
pattern <- matrix("", n, n)
subject <- pattern
## Generate alignments
for(i in 1:(n-1)) {
for(j in (i+1):n) {
alignment <- pairAlign(sequences[i], sequences[j], substitutionMatrix=substitutionMatrix, gapOpening=gapOpening, gapExtension=gapExtension)
pattern[j, i] <- alignment[[1]]
subject[i, j] <- alignment[[1]]
subject[j, i] <- alignment[[2]]
pattern[i, j] <- alignment[[2]]
}
}
distances <- sapply(mapply(`!=`, strsplit(pattern, ""), strsplit(subject, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
possibleCenters <- which(colSums(distanceMatrix) == min(colSums(distanceMatrix)))
center <- possibleCenters[which.max(nchar(sequences[possibleCenters]))]
patterns <- strsplit(pattern[,center][-center], "")
subjects <- strsplit(subject[,center][-center], "")
return(list(patterns, subjects, center))
}
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
buildMSA(patterns, subjects, center)
centerStar <- function(sequences, substitutionMatrix, gapOpening, gapExtension) {
#Your code here
tmp <- patterns_subjects(sequences, gapOpening=gapOpening, gapExtension=gapExtension, substitutionMatrix=substitutionMatrix)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
return(buildMSA(patterns, subjects, center))
}
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
centerStar(globins, "BLOSUM62", gapOpening = -10, gapExtension = -3)
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
source("pairAlign.R")
library(Biostrings)
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
source("pairAlign.R")
library(Biostrings)
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
source("pairAlign.R")
library(Biostrings)
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
source("pairAlign.R")
library(Biostrings)
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
source("pairAlign.R")
library(Biostrings)
centerStar <- function(sequences, substitutionMatrix, gapOpening, gapExtension) {
#Your code here
tmp <- patterns_subjects(sequences, gapOpening=gapOpening, gapExtension=gapExtension, substitutionMatrix=substitutionMatrix)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
return(buildMSA(patterns, subjects, center))
}
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
centerStar(globins, "BLOSUM62", gapOpening = -10, gapExtension = -3)
# CODE FROM LASt ASSIGNMENT THAT WE NEED
buildMSA <- function(patterns, subjects, center) {
MSA <- rbind(patterns[[1]], subjects[[1]])
for(i in 2:length(patterns)) {
j = 1 #index in new row
k = 1 #index in alignment of center sequence to sequence i
m = 1 #column index of MSA
maxLength = ncol(MSA) + length(patterns[[i]])
newRow = character(maxLength)
while(k <= length(patterns[[i]]) && m <= ncol(MSA)) {
if(patterns[[i]][k] == MSA[1, m]) {
newRow[j] <- subjects[[i]][k]
j <- j + 1
k <- k + 1
m <- m + 1
} else if(MSA[1, m] == "-") {
newRow[j] <- "-"
j <- j + 1
m <- m + 1
} else if(patterns[[i]][k] == "-") {
if(m == 1) {
MSA <- cbind(rep("-", nrow(MSA)), MSA)
} else {
MSA <- cbind(MSA[, 1:(m-1)], rep("-", nrow(MSA)), MSA[, m:ncol(MSA)])
}
newRow[j] <- subjects[[i]][k]
m <- m + 1
j <- j + 1
k <- k + 1
}
}
while(k <= length(patterns[[i]])) {
MSA <- cbind(MSA, rep("-", nrow(MSA)))
newRow[j] <- subjects[[i]][k]
k <- k + 1
j <- j + 1
}
while(m <= ncol(MSA)) {
newRow[j] <- "-"
m <- m + 1
j <- j + 1
}
newRow <- newRow[1:(m - 1)]
MSA <- rbind(MSA, newRow)
}
rownames(MSA) <- c("    Center:", paste0("Sequence ", 1:(nrow(MSA)), ":")[-center])
colnames(MSA) <- 1:ncol(MSA)
return(MSA)
}
patterns_subjects <- function(sequences, gapOpening=-6, gapExtension=-3, substitutionMatrix="BLOSUM62"){
n <- length(sequences)
pattern <- matrix("", n, n)
subject <- pattern
## Generate alignments
for(i in 1:(n-1)) {
for(j in (i+1):n) {
alignment <- pairAlign(sequences[i], sequences[j], substitutionMatrix=substitutionMatrix, gapOpening=gapOpening, gapExtension=gapExtension)
pattern[j, i] <- alignment[[1]]
subject[i, j] <- alignment[[1]]
subject[j, i] <- alignment[[2]]
pattern[i, j] <- alignment[[2]]
}
}
distances <- sapply(mapply(`!=`, strsplit(pattern, ""), strsplit(subject, "")), sum)
distanceMatrix <- matrix(distances, n, n)
dimnames(distanceMatrix) = list(sequences, sequences)
possibleCenters <- which(colSums(distanceMatrix) == min(colSums(distanceMatrix)))
center <- possibleCenters[which.max(nchar(sequences[possibleCenters]))]
patterns <- strsplit(pattern[,center][-center], "")
subjects <- strsplit(subject[,center][-center], "")
return(list(patterns, subjects, center))
}
sequences <- c("PVWHTAE", "HEVGAWGHEE", "PMCWGHVE")
tmp <- patterns_subjects(sequences)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
buildMSA(patterns, subjects, center)
centerStar <- function(sequences, substitutionMatrix, gapOpening, gapExtension) {
#Your code here
tmp <- patterns_subjects(sequences, gapOpening=gapOpening, gapExtension=gapExtension, substitutionMatrix=substitutionMatrix)
patterns <- tmp[[1]]
subjects <- tmp[[2]]
center <- tmp[[3]]
return(buildMSA(patterns, subjects, center))
}
globins <- unlist(seqinr::read.fasta("globins.fasta", seqtype = "AA", as.string = T))
centerStar(globins, "BLOSUM62", gapOpening = -10, gapExtension = -3)
?read.csv
# load in the data
forward <- read.csv("human_Chr2_ORFs_forward.csv")
# load in the data
forward <- read.csv("Homo_sapiens_Chr2_ORFs_forward.csv")
reverse <- read.csv("Homo_sapiens_Chr2_ORFs_reverse.csv")
# display using head
head(forward)
head(reverse)
# load in the data
forward <- read.csv("Homo_sapiens_Chr2_ORFs_forward.csv")
reverse <- read.csv("Homo_sapiens_Chr2_ORFs_reverse.csv")
# display using head
head(forward)
head(reverse)
# NEED TO DO
forward[forward$length >= 450, ]
# NEED TO DO
forward[forward$Length >= 450, ]
# NEED TO DO
forward[forward$Length >= 450, ].shape
# NEED TO DO
forward[forward$Length >= 450, ].nrows
# NEED TO DO
forward[forward$Length >= 450, ].nrow
# NEED TO DO
forward[forward$Length >= 450, ].nrow()
# NEED TO DO
forward[forward$Length >= 450, ].nrows()
# NEED TO DO
nrow(forward[forward$Length >= 450, ])
print("Number of ORFs in forward strand with length of atleast 450 bases")
nrow(forward[forward$Length >= 450, ])
print("Number of ORFs in reverse strand with length of atleast 450 bases")
nrow(reverse[reverse$Length >= 450, ])
for (i in 1:4){
forward <- read.csv("Homo_sapiens_Chr" + str(i) + "_ORFs_forward.csv")
reverse <- read.csv("Homo_sapiens_Chr"+ str(i) + "_ORFs_reverse.csv")
print("Number of ORFs in forward strand of chromosome " + str(i) +  "with length of atleast 450 bases")
nrow(forward[forward$Length >= 450, ])
print("Number of ORFs in reverse strand of chromosome " + str(i) + " with length of atleast 450 bases")
nrow(reverse[reverse$Length >= 450, ])
}
for (i in 1:4){
forward <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_forward.csv"))
reverse <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_reverse.csv"))
print(paste("Number of ORFs in forward strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(forward[forward$Length >= 450, ])
print(paste("Number of ORFs in reverse strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(reverse[reverse$Length >= 450, ])
}
for (i in 1:4){
forward <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_forward.csv"))
reverse <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_reverse.csv"))
print(paste("Number of ORFs in forward strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(forward[forward$Length >= 450, ])
print(paste("Number of ORFs in reverse strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(reverse[reverse$Length >= 450, ])
}
for (i in 1:4){
forward <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_forward.csv"))
reverse <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_reverse.csv"))
print(paste("Number of ORFs in forward strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(forward[forward$Length >= 450, ])
print(paste("Number of ORFs in reverse strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(reverse[reverse$Length >= 450, ])
}
for (i in 1:4){
forward <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_forward.csv", sep=""))
reverse <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_reverse.csv", sep=""))
print(paste("Number of ORFs in forward strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(forward[forward$Length >= 450, ])
print(paste("Number of ORFs in reverse strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
nrow(reverse[reverse$Length >= 450, ])
}
for (i in 1:4){
forward <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_forward.csv", sep=""))
reverse <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_reverse.csv", sep=""))
print(paste("Number of ORFs in forward strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
print(nrow(forward[forward$Length >= 450, ]))
print(paste("Number of ORFs in reverse strand of chromosome ", as.character(i), " with length of atleast 450 bases"))
print(nrow(reverse[reverse$Length >= 450, ]))
}
for (i in 1:4){
forward <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_forward.csv", sep=""))
reverse <- read.csv(paste("Homo_sapiens_Chr", as.character(i), "_ORFs_reverse.csv", sep=""))
print(paste("Number of ORFs in forward strand of chromosome", as.character(i), "with length of atleast 450 bases"))
print(nrow(forward[forward$Length >= 450, ]))
print(paste("Number of ORFs in reverse strand of chromosome", as.character(i), "with length of atleast 450 bases"))
print(nrow(reverse[reverse$Length >= 450, ]))
}
