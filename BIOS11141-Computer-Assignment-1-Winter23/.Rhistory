multiplesOfFive <- seq(5, 50, 5) #create a vector of numbers *from* 5, *to* 50, in *steps* of 5
multiplesOfFive
notDivisibleByTen <- multiplesOfFive %% 10 != 0 #x %% y == 0 is asking, "is x evenly divisible by y?"
notDivisibleByTen
multiplesOfFive[notDivisibleByTen]
carSpeed <- 69
speedLimit <- 65
if(carSpeed > speedLimit) {
print("Give ticket")
} else {
print("Do nothing")
}
if(1) {
print("a")
} else {
print("b")
}
1 * 2
2 * 2
3 * 2
for(i in 1:3) {
x <-  i + 10
y <- x * 2
z <- y^2
print(z)
}
for(i in 1:3) {
for(j in 1:3) {
print(j * i)
}
}
oranges <- 5
while (oranges > 0) {
if (oranges > 1) {
print("Someone just bought one of my oranges!")
oranges <- oranges -1
print(paste("I still have ", oranges, "oranges to sell!"))
} else {
print("Someone just bought one of my oranges!")
oranges <- oranges -1
print("I don't have any oranges to sell, :(!")
}
}
#x <- 3
#while(x <=  6){
#	print(x + x)
#}
parrot <- function(x) {
print(x)
}
mime <- function(x) {
return(x)
}
parrot(5)
mime(5)
a <- parrot(5)
b <- mime(5)
terminatePrematurely <- function(x) {
return("Oops!")
## Converts input from decimal to binary
n <- numeric(floor(log2(x)) + 1)
while(x > 1){
exp <- floor(log2(x))
n[exp + 1] <- 1
x <- x - 2^exp
}
n[1] <- x %% 2
return(paste0(rev(n), collapse = ""))
}
terminatePrematurely(1089410839856315)
multipleArgFunction <- function(x, y, z) {
return(x * y  + z)
}
multipleArgFunction(3, 2, 1)
multipleArgFunction(1, 2, 3)
multipleArgFunction(z = 3, y = 2, x = 1)
noInputFunc <- function() {
return("It works!")
}
noInputFunc()
getSquare <- function(x) {
return(x^2)
}
Raise4 <- function(x) {
return(getSquare(getSquare(x)))
}
3^4 == Raise4(3)
myVec <- numeric(4)
print(myVec)
for(index in seq_along(myVec)) {
myVec[index] <- index^2
}
print(myVec)
test<-c(1,2,3,4)
hist(test)
test<-c(1,2,3,4)
test<-c(1,2,3,4)
if(True){
print(1)
}
if(6 > 5){
print(1)
}
for(i in 1:10){
print(i)
}
i<-1
while(i<=5){
print(i)
i<-i+1
}
sum<-function(input1, input2){
output<-input1+input2
return(output)
}
print(sum(1,2))
sum<-function(input1, input2){
output<-input1+input2
return(output)
}
print(sum(1,2.5))
sum<-function(input1, input2){
output<-input1+input2
return(output)
}
print(sum(1,"3"))
sum<-function(input1, input2){
output<-input1+input2
return(output)
}
print(sum(1,2.5))
pi^6
3e6*pi
3e6*pi
TRUE + TRUE
TRUE + FALSE
x<-5
x
y
y<-2*x
y
z<-1
z
x<-10
y
?c
myVec <- c(10,20,30,40,50,60,70,80,90,100)
myVec-8
newVec <- myVec-8
newVec
newVec <- myVec - 8
newVec
myVec <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
myVec
newVec <- myVec - 8
newVec
?mean()
mean(myVec)
str(myVec)
length(myVec)
myVec[3:5]
myVec[c(1,3,8)]
2*myVec
myVec[1] <- 7/5
myVec[1] <- 7.5
myVec
?c
?seq
heartRate <- seq(60, 100, by = 2)
heartRate
averageEjection <- 69
# number of beats in 30 min
beatsTotal <- heartRate * 30
# total volume ejected
ejectionVolumes <- beatsTotal * averageEjection
ejectionVolumes
carSpeed <- 67
speedLimit <- 65
if(carSpeed > speedLimit) {
print("Give ticket")
} else {
print("Do nothing")
}
5+3
1+4
4-5
7*3
4/3
2^3
11 %% 2
11 %/% 2
#Winter 2022
#BIOS 11141 assignment1
#An intro to programming in R
#calculations in R; variables; logical expressions; control flow;
#Task 1.1: find the value of
print("enter expression here")
#This is a code chunk
plotx <- 1:10
ploty <- plotx*plotx
plot(plotx,ploty, type = "l", main = "Squares", xlab = "x", ylab = "x^2")
pi^6
3e6*pi
x <- 5
x
y <- 2 * x
y
z <- 1
z
z <- z + 1
z
z <- z + 1
z
myVec <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
myVec
newVec <- myVec - 8
newVec
mean(myVec)
str(myVec)
length(myVec)
myVec[1]
myVec[3]
myVec[6]
heartRate <- seq(60, 100, by = 2)
heartRate
averageEjection <- 69
# number of beats in 30 min
beatsTotal <- heartRate * 30
# total volume ejected
ejectionVolumes <- beatsTotal * averageEjection
ejectionVolumes
2 == 2
3 == 4
2 != 2
4 >= 1
2 <= 4
2 < 4
3 > 4
x <- 4
(x > 3) && (x < 5)
x <- 4
(x > 10) && (x < 5)
(x > 10) || (x < 5)
multiplesOfFive <- seq(5, 50, 5) #create a vector of numbers *from* 5, *to* 50, in *steps* of 5
multiplesOfFive
notDivisibleByTen <- multiplesOfFive %% 10 != 0 #x %% y == 0 is asking, "is x evenly divisible by y?"
notDivisibleByTen
multiplesOfFive[notDivisibleByTen]
carSpeed <- 67
speedLimit <- 65
if(carSpeed > speedLimit) {
print("Give ticket")
} else {
print("Do nothing")
}
if(1) {
print("a")
} else {
print("b")
}
# Find the minimum of 3 numbers
x <- 4
y <- 5
z <- 3
if(x < y){
if(x < z){
print(x)
}
else{
print(z)
}
} else {
if (y < z){
print(y)
}
else {
print(z)
}
}
bodyTemp = 43
if (bodyTemp > 45 || bodyTemp < 40){
print("seek medical attention")
} else {
print("do nothing")
}
1 * 2
2 * 2
3 * 2
for(i in 1:3) {
x <-  i + 10
y <- x * 2
z <- y^2
print(z)
}
for(i in 1:3) {
for(j in 1:3) {
print(j * i)
}
}
for (i in 1:10){
if (i %% 2 == 0 || i == 5){
print(i)
}
}
for (i in 1:length(letters)){
print(toupper(letters[i]))
}
oranges <- 5
while (oranges > 0) {
if (oranges > 1) {
print("Someone just bought one of my oranges!")
oranges <- oranges -1
print(paste("I still have ", oranges, "oranges to sell!"))
} else {
print("Someone just bought one of my oranges!")
oranges <- oranges -1
print("I don't have any oranges to sell, :(!")
}
}
x <- 3
while (x <= 6){
print(x + x)
x <- x + 1
}
#x <- 3
#while(x <=  6){
#	print(x + x)
#}
parrot <- function(x) {
print(x)
}
mime <- function(x) {
return(x)
}
parrot(5)
mime(5)
a <- parrot(5)
b <- mime(5)
findSquare <- function(n){
return(n^2)
}
squared <- findSquare(269)
terminatePrematurely <- function(x) {
return("Oops!")
## Converts input from decimal to binary
n <- numeric(floor(log2(x)) + 1)
while(x > 1){
exp <- floor(log2(x))
n[exp + 1] <- 1
x <- x - 2^exp
}
n[1] <- x %% 2
return(paste0(rev(n), collapse = ""))
}
terminatePrematurely(1089410839856315)
multipleArgFunction <- function(x, y, z) {
return(x * y  + z)
}
multipleArgFunction(3, 2, 1)
multipleArgFunction(1, 2, 3)
multipleArgFunction(z = 3, y = 2, x = 1)
noInputFunc <- function() {
return("It works!")
}
noInputFunc()
getSquare <- function(x) {
return(x^2)
}
Raise4 <- function(x) {
return(getSquare(getSquare(x)))
}
3^4 == Raise4(3)
calcMean <- function(vec){
return(sum(vec)/length(vec))
}
calcMean(9:30)
# Calculate pi to the power of 6
pi^6
# Subtract 8 from myVec
myVec <- c(10, 20, 30, 40, 50, 60, 70, 80, 90, 100)
newVec <- myVec - 8
newVec
# Subtract 8 from myVec
newVec <- myVec - 8
newVec
# Calculate the mean of myVec
mean(myVec)
# Subtract 8 from myVec
newVec <- myVec - 8
newVec
# Calculate the mean of myVec
mean(myVec)
#myVec[3:5]
#myVec[-3]
#myVec[c(1,3,8)]
#2*myVec
#myVec[1] <- 7.5
# Create vector of heart rates from 60 to 100 in increments of 2
heartRate <- seq(60, 100, by = 2)
heartRate
# create vector ejectionVolumes containing the total amount of blood (in mL) ejected in 30 minutes for each heart rate in your range (Assuming ejection rate of 69 mL/beat)
averageEjection <- 69
# number of beats in 30 min
beatsTotal <- heartRate * 30
# total volume ejected
ejectionVolumes <- beatsTotal * averageEjection
ejectionVolumes
# Find the minimum of 3 numbers
x <- 4
y <- 5
z <- 3
if(x < y){
if(x < z){
print(x)
}
else{
print(z)
}
} else {
if (y < z){
print(y)
}
else {
print(z)
}
}
# instructs patients to “seek medical attention” if their bodyTemp is above 45 degrees or below 40 degrees, or to “do nothing” if their temperature is within an acceptable range.
bodyTemp = 43
if (bodyTemp > 45 || bodyTemp < 40){
print("seek medical attention")
} else {
print("do nothing")
}
#for loop that iterates from 1 to 10, and prints out the even numbers between 1 and 10 as well as the number 5.
for (i in 1:10){
if (i %% 2 == 0 || i == 5){
print(i)
}
}
#for loop that iterates over letters and prints each letter in upper-case
for (i in 1:length(letters)){
print(toupper(letters[i]))
}
#x <- 3
#while(x <=  6){
#   print(x + x)
#}
# modified so loop will be functional
x <- 3
while (x <= 6){
print(x + x)
x <- x + 1
}
# calculate square of 269 and silently assign it to variable squared
squared <- findSquare(269)
# function that takes in one parameter n and returns its square
findSquare <- function(n){
return(n^2)
}
# calculate square of 269 and silently assign it to variable squared
squared <- findSquare(269)
# calculates mean of vector
calcMean <- function(vec){
return(sum(vec)/length(vec))
}
# execute calcMean on vector containing values from 9 to 30
calcMean(9:30)
rm(list = ls())
# calculates mean of vector
calcMean <- function(vec){
return(sum(vec)/length(vec))
}
# execute calcMean on vector containing values from 9 to 30
calcMean(9:30)
# check using Rs built in mean function
mean(9:30)
# function called H_from_pH that, given a pH value, outputs the concentration of H+.
# function called OH_from_pH that, given a pH value, outputs the concentration of OH-
H_from_pH <- function(pH){
return(10^(-pH))
}
OH_from_pH <- function(pH){
return(10^(-(14-pH)))
}
# Using a for loop convert each pH from 1-10 into concentrations of H+. Store the list of [H+] in a vector.
myVec <- numeric(10)
for (ph in 1:10){
myVec[ph] <- 10^(-ph)
}
# Using a for loop convert each pH from 1-10 into concentrations of H+. Store the list of [H+] in a vector.
myVec <- numeric(10)
for (ph in 1:10){
myVec[ph] <- 10^(-ph)
}
myVec
# function called H_from_pH that, given a pH value, outputs the concentration of H+.
# function called OH_from_pH that, given a pH value, outputs the concentration of OH-
H_from_pH <- function(pH){
return(10^(-pH))
}
OH_from_pH <- function(pH){
return(10^(-(14-pH)))
}
# function that returns the standard deviation of a vector of numbers
calc_std <- function(vec){
mu <- mean(vec)
return((sum((vec-mu)^2)/(length(vec)-1))^0.5)
}
# function executed on vector 1-200 with step size of 0.25
calc_std(seq(1, 200, by=0.25))
# confirm results of function match R's built in standard deviation function
sd(seq(1, 200, by=0.25))
